name: Bert End-to-End Tests

on:
  schedule:
    - cron: "0 9 * * 1"
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "benchmarks/bert/**"
      - "utils/**"
      - "tools/**"
      - "runner/**"

  pull_request:
    branches: [main]
    paths:
      - "benchmarks/bert/**"
      - "utils/**"
      - "tools/**"
      - "runner/**"

env:
  GOOS: linux
  GO111MODULE: on
  PORT: 50051
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    name: Build and push all images
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            bert-python
          ]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          lfs: "true"

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@master
        with:
          version: '2'

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Set up python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel ez_setup setuptools
          GRPC_PYTHON_BUILD_SYSTEM_ZLIB=true

      - name: Setup go dependencies
        working-directory: benchmarks/auth
        env:
          GOPRIVATE_KEY: ${{ secrets.XDT_REPO_ACCESS_KEY }}
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1

      # - name: Data Setup
      #   working-directory: benchmarks/bert
      #   run: make setup
        
      # - name: Build and push
      #   working-directory: benchmarks/bert
      #   run: make push-${{ matrix.service }}
      #  Downloading the model takes too much time, simply pull the image from docker container

      # - name: Pull the Image
      #   working-directory: benchmarks/bert
      #   run: make pull-${{ matrix.service }}

  test-compose:
    name: Test Docker Compose
    needs: build-and-push
    env:
      YAML_DIR: benchmarks/bert/yamls/docker-compose/
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            bert-python
          ]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          lfs: "true"

      # - name: start docker-compose benchmark
      #   run: |
      #     docker-compose -f ${{ env.YAML_DIR }}/dc-${{ matrix.service }}.yaml pull
      #     docker-compose -f ${{ env.YAML_DIR }}/dc-${{ matrix.service }}.yaml up &> log_file &
      #     sleep 60s
      #     cat log_file

      # - name: invoke the chain
      #   run: |
      #     ./tools/bin/grpcurl -plaintext localhost:50000 helloworld.Greeter.SayHello
      # Currently cannot run on CI due to no enough space on device

      # - name: show docker-compose log
      #   run: cat log_file
