// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProducerConsumerClient is the client API for ProducerConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProducerConsumerClient interface {
	ConsumeByte(ctx context.Context, in *ConsumeByteRequest, opts ...grpc.CallOption) (*ConsumeByteReply, error)
	ConsumeStream(ctx context.Context, opts ...grpc.CallOption) (ProducerConsumer_ConsumeStreamClient, error)
}

type producerConsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewProducerConsumerClient(cc grpc.ClientConnInterface) ProducerConsumerClient {
	return &producerConsumerClient{cc}
}

func (c *producerConsumerClient) ConsumeByte(ctx context.Context, in *ConsumeByteRequest, opts ...grpc.CallOption) (*ConsumeByteReply, error) {
	out := new(ConsumeByteReply)
	err := c.cc.Invoke(ctx, "/prodcon.ProducerConsumer/ConsumeByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerConsumerClient) ConsumeStream(ctx context.Context, opts ...grpc.CallOption) (ProducerConsumer_ConsumeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProducerConsumer_ServiceDesc.Streams[0], "/prodcon.ProducerConsumer/ConsumeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &producerConsumerConsumeStreamClient{stream}
	return x, nil
}

type ProducerConsumer_ConsumeStreamClient interface {
	Send(*ConsumeByteRequest) error
	CloseAndRecv() (*ConsumeByteReply, error)
	grpc.ClientStream
}

type producerConsumerConsumeStreamClient struct {
	grpc.ClientStream
}

func (x *producerConsumerConsumeStreamClient) Send(m *ConsumeByteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *producerConsumerConsumeStreamClient) CloseAndRecv() (*ConsumeByteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConsumeByteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerConsumerServer is the server API for ProducerConsumer service.
// All implementations must embed UnimplementedProducerConsumerServer
// for forward compatibility
type ProducerConsumerServer interface {
	ConsumeByte(context.Context, *ConsumeByteRequest) (*ConsumeByteReply, error)
	ConsumeStream(ProducerConsumer_ConsumeStreamServer) error
	mustEmbedUnimplementedProducerConsumerServer()
}

// UnimplementedProducerConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedProducerConsumerServer struct {
}

func (UnimplementedProducerConsumerServer) ConsumeByte(context.Context, *ConsumeByteRequest) (*ConsumeByteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeByte not implemented")
}
func (UnimplementedProducerConsumerServer) ConsumeStream(ProducerConsumer_ConsumeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeStream not implemented")
}
func (UnimplementedProducerConsumerServer) mustEmbedUnimplementedProducerConsumerServer() {}

// UnsafeProducerConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducerConsumerServer will
// result in compilation errors.
type UnsafeProducerConsumerServer interface {
	mustEmbedUnimplementedProducerConsumerServer()
}

func RegisterProducerConsumerServer(s grpc.ServiceRegistrar, srv ProducerConsumerServer) {
	s.RegisterService(&ProducerConsumer_ServiceDesc, srv)
}

func _ProducerConsumer_ConsumeByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeByteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerConsumerServer).ConsumeByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prodcon.ProducerConsumer/ConsumeByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerConsumerServer).ConsumeByte(ctx, req.(*ConsumeByteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerConsumer_ConsumeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProducerConsumerServer).ConsumeStream(&producerConsumerConsumeStreamServer{stream})
}

type ProducerConsumer_ConsumeStreamServer interface {
	SendAndClose(*ConsumeByteReply) error
	Recv() (*ConsumeByteRequest, error)
	grpc.ServerStream
}

type producerConsumerConsumeStreamServer struct {
	grpc.ServerStream
}

func (x *producerConsumerConsumeStreamServer) SendAndClose(m *ConsumeByteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *producerConsumerConsumeStreamServer) Recv() (*ConsumeByteRequest, error) {
	m := new(ConsumeByteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerConsumer_ServiceDesc is the grpc.ServiceDesc for ProducerConsumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProducerConsumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodcon.ProducerConsumer",
	HandlerType: (*ProducerConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumeByte",
			Handler:    _ProducerConsumer_ConsumeByte_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeStream",
			Handler:       _ProducerConsumer_ConsumeStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "prodcon.proto",
}

// ProdConDriverClient is the client API for ProdConDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdConDriverClient interface {
	Benchmark(ctx context.Context, in *BenchType, opts ...grpc.CallOption) (*BenchResponse, error)
	FetchByte(ctx context.Context, in *ReductionRequest, opts ...grpc.CallOption) (*ConsumeByteReply, error)
}

type prodConDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewProdConDriverClient(cc grpc.ClientConnInterface) ProdConDriverClient {
	return &prodConDriverClient{cc}
}

func (c *prodConDriverClient) Benchmark(ctx context.Context, in *BenchType, opts ...grpc.CallOption) (*BenchResponse, error) {
	out := new(BenchResponse)
	err := c.cc.Invoke(ctx, "/prodcon.ProdConDriver/Benchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodConDriverClient) FetchByte(ctx context.Context, in *ReductionRequest, opts ...grpc.CallOption) (*ConsumeByteReply, error) {
	out := new(ConsumeByteReply)
	err := c.cc.Invoke(ctx, "/prodcon.ProdConDriver/FetchByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdConDriverServer is the server API for ProdConDriver service.
// All implementations must embed UnimplementedProdConDriverServer
// for forward compatibility
type ProdConDriverServer interface {
	Benchmark(context.Context, *BenchType) (*BenchResponse, error)
	FetchByte(context.Context, *ReductionRequest) (*ConsumeByteReply, error)
	mustEmbedUnimplementedProdConDriverServer()
}

// UnimplementedProdConDriverServer must be embedded to have forward compatible implementations.
type UnimplementedProdConDriverServer struct {
}

func (UnimplementedProdConDriverServer) Benchmark(context.Context, *BenchType) (*BenchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Benchmark not implemented")
}
func (UnimplementedProdConDriverServer) FetchByte(context.Context, *ReductionRequest) (*ConsumeByteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByte not implemented")
}
func (UnimplementedProdConDriverServer) mustEmbedUnimplementedProdConDriverServer() {}

// UnsafeProdConDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdConDriverServer will
// result in compilation errors.
type UnsafeProdConDriverServer interface {
	mustEmbedUnimplementedProdConDriverServer()
}

func RegisterProdConDriverServer(s grpc.ServiceRegistrar, srv ProdConDriverServer) {
	s.RegisterService(&ProdConDriver_ServiceDesc, srv)
}

func _ProdConDriver_Benchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdConDriverServer).Benchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prodcon.ProdConDriver/Benchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdConDriverServer).Benchmark(ctx, req.(*BenchType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdConDriver_FetchByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdConDriverServer).FetchByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prodcon.ProdConDriver/FetchByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdConDriverServer).FetchByte(ctx, req.(*ReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdConDriver_ServiceDesc is the grpc.ServiceDesc for ProdConDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdConDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodcon.ProdConDriver",
	HandlerType: (*ProdConDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Benchmark",
			Handler:    _ProdConDriver_Benchmark_Handler,
		},
		{
			MethodName: "FetchByte",
			Handler:    _ProdConDriver_FetchByte_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodcon.proto",
}

// ClientProducerClient is the client API for ClientProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientProducerClient interface {
	ProduceBytes(ctx context.Context, in *ProduceBytesRequest, opts ...grpc.CallOption) (*Empty, error)
}

type clientProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientProducerClient(cc grpc.ClientConnInterface) ClientProducerClient {
	return &clientProducerClient{cc}
}

func (c *clientProducerClient) ProduceBytes(ctx context.Context, in *ProduceBytesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/prodcon.ClientProducer/ProduceBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientProducerServer is the server API for ClientProducer service.
// All implementations must embed UnimplementedClientProducerServer
// for forward compatibility
type ClientProducerServer interface {
	ProduceBytes(context.Context, *ProduceBytesRequest) (*Empty, error)
	mustEmbedUnimplementedClientProducerServer()
}

// UnimplementedClientProducerServer must be embedded to have forward compatible implementations.
type UnimplementedClientProducerServer struct {
}

func (UnimplementedClientProducerServer) ProduceBytes(context.Context, *ProduceBytesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBytes not implemented")
}
func (UnimplementedClientProducerServer) mustEmbedUnimplementedClientProducerServer() {}

// UnsafeClientProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientProducerServer will
// result in compilation errors.
type UnsafeClientProducerServer interface {
	mustEmbedUnimplementedClientProducerServer()
}

func RegisterClientProducerServer(s grpc.ServiceRegistrar, srv ClientProducerServer) {
	s.RegisterService(&ClientProducer_ServiceDesc, srv)
}

func _ClientProducer_ProduceBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientProducerServer).ProduceBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prodcon.ClientProducer/ProduceBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientProducerServer).ProduceBytes(ctx, req.(*ProduceBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientProducer_ServiceDesc is the grpc.ServiceDesc for ClientProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodcon.ClientProducer",
	HandlerType: (*ClientProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceBytes",
			Handler:    _ClientProducer_ProduceBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodcon.proto",
}
